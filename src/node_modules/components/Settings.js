import React, {useContext, useEffect, useState} from 'react';
import {Redirect} from 'react-router-dom';

import {CurrentUserContext} from 'contexts/currentUser';
import BackendErrorMessages from 'components/BackendErrorMessages';
import useFetch from 'hooks/useFetch';
import useLocalStorage from 'hooks/useLocalStorage';

const Settings = () => {

    const apiUrl = '/user';
    const [, setToken] = useLocalStorage('token');
    const [currentUserState, dispatch] = useContext(CurrentUserContext);
    const [name, setName] = useState('')
    const [image, setImage] = useState('')
    const [bio, setBio] = useState('')
    const [email, setEmail] = useState('')
    const [password, setPassword] = useState('')
    const [isSuccessfulLogout, setIsSuccessfulLogout] = useState(false);

    const [{response, error}, doFetch] = useFetch(apiUrl);

    const handleSubmit = (e) => {
        e.preventDefault();
        doFetch({
            method: 'put',
            data: {
                user: {
                    ...currentUserState.currentUser,
                    image,

                    bio,
                    username: name,
                    email,
                    password
                }
            }
      })

    };

    const logout = (e) => {
        e.preventDefault();

        setToken('');
        dispatch({type: 'SET_UNAUTHORIZED'});
        setIsSuccessfulLogout(true);
    };

    useEffect(() => {
        if (!currentUserState.currentUser) {
            return;
        }
        const currentUser = currentUserState.currentUser

        setImage(currentUser.image);
        setName(currentUser.username);
        setBio(currentUser.bio);
        setEmail(currentUser.email);

        setIsSuccessfulLogout(false)
    }, [currentUserState.currentUser]);

    useEffect(() => {
        if (!response) {
            return;
        }
        dispatch({type: 'SET_AUTHORIZED', payload: response.user});
    }, [response, dispatch]);

    if (isSuccessfulLogout) {
        return <Redirect to="/"/>;
    }

    const funcDeclaimer = (func) => {
        let funcSec = (e) => {
            return func(e.target.value);
        };
        return funcSec;
    };


    return (
        <div className="settings-page">
            <div className="container page">
                <div className="row">
                    <div className="col-md-6 offset-md-3 col-xs-12">
                        <h1 className="text-xs-center">Your Settings</h1>
                        {error && <BackendErrorMessages backendErrors={error.errors}/>}
                        <form onSubmit={handleSubmit}>
                            <fieldset>
                                <fieldset className="form-group">
                                    <input className="form-control form-control-lg" placeholder="image URL"
                                           value={image}
                                           onChange={funcDeclaimer(setImage)} type="text"/>
                                </fieldset>
                                <fieldset className="form-group">
                                    <input className="form-control form-control-lg" placeholder="Username" value={name}
                                           onChange={funcDeclaimer(setName)} type="text"/>
                                </fieldset>
                                <fieldset className="form-group">
                                <textarea className="form-control " placeholder="About you" rows="8" value={bio}
                                          onChange={funcDeclaimer(setBio)}/>
                                </fieldset>
                                <fieldset className="form-group">
                                    <input className="form-control form-control-lg" placeholder="email" value={email}
                                           onChange={funcDeclaimer(setEmail)} type="email"/>
                                </fieldset>
                                <fieldset className="form-group">
                                    <input className="form-control form-control-lg" placeholder="New password"
                                           value={password}
                                           onChange={funcDeclaimer(setPassword)} type="password"/>
                                </fieldset>
                                <fieldset className="form-group">
                                    <button className="btn btn-lg btn-primary pull-xs-right" type="submit">Update
                                        Settings
                                    </button>
                                </fieldset>
                            </fieldset>
                        </form>
                        <hr/>
                        <button className="btn btn-outline-danger" onClick={logout}>LOGOUT</button>
                    </div>
                </div>
            </div>
        </div>
    )
};

export default Settings;


