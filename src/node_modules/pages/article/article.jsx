import React, {useContext, useEffect, useState} from 'react';
import useFetch from 'hooks/useFetch';
import {Link, Redirect} from 'react-router-dom';
import TagList from 'components/tagList';
import Loading from 'components/Loading';
import ErrorMessage from 'components/ErrorMessage';
import {CurrentUserContext} from 'contexts/currentUser';

const Article = (props) => {

    const slug = props.match.params.slug;
    const urlUSer = `/articles/${slug}`;

    const [{
        response: fetchArticleResponse,
        isLoading: fetchArticleIsLoading,
        error: fetchErrorArticle
    }, doArticleFetch] = useFetch(urlUSer);

    const [{
        response: deleteArticleResponse

    }, deleteArticleFetch] = useFetch(urlUSer);
    const [successfulDelete, setSuccessfulDelete] = useState(false);
    // noinspection JSCheckFunctionSignatures
    const [currentUserState] = useContext(CurrentUserContext);

    const isAuthor = () => {
        if (!fetchArticleResponse || !currentUserState.isLoggedIn) {
            return false;
        }
        return fetchArticleResponse.article.author.username === currentUserState.currentUser.username;
    };


    useEffect(() => {
        doArticleFetch();
    }, [doArticleFetch]);


    const deleteArticle = () => {
        deleteArticleFetch({
            method: 'delete'
        });
    };

    useEffect(() => {
        if (!deleteArticleResponse) {
            return;
        }
        setSuccessfulDelete(true);
    }, [deleteArticleResponse]);

    if (successfulDelete) {
        return <Redirect to='/'/>;
    }
    return <div className="article-page">

        {!fetchArticleIsLoading && fetchArticleResponse && (
            <div className="banner">
                <div className="container">
                    <h1>{fetchArticleResponse.article.title}</h1>
                    <div className="article-meta">
                        <Link to={`profiles/${fetchArticleResponse.article.author.username}`}>
                            <img src={fetchArticleResponse.article.author.image} alt=""/>
                        </Link>
                        <div className="info">
                            <Link
                                to={fetchArticleResponse.article.author.username}>{fetchArticleResponse.article.author.username}</Link>
                            <span className="date">{fetchArticleResponse.article.createdAt}</span>
                        </div>
                        {isAuthor() && (<span>
                            <Link to={`/articles/${fetchArticleResponse.article.slug}/edit`}
                                  className="btn btn-sm btn-outline-secondary">
                                <i className="ion-edit"></i>
                                &nbsp; Edit Article
                            </Link>
                            <button className="btn btn-sm btn-outline-danger" onClick={deleteArticle}>
                                <i className="ion-trash-a"></i>
                                &nbsp; Delete Article
                            </button>
                        </span>)}
                    </div>
                </div>
            </div>
        )}

        <div className="container page">
            {fetchArticleIsLoading && <Loading/>}
            {fetchErrorArticle  && <ErrorMessage/>}

            {!fetchArticleIsLoading && fetchArticleResponse && (
                <div className="row article-content">
                    <div className="col-xs-12">
                        <p>{fetchArticleResponse.article.body}</p>
                    </div>
                    <TagList tags={fetchArticleResponse.article.tagList}></TagList>
                </div>
            )}
        </div>
    </div>;

};

export default Article;